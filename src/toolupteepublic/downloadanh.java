/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package toolupteepublic;

import com.imagetyperzapi.ImageTyperzAPI;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.security.CodeSource;
import java.security.ProtectionDomain;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import sun.misc.BASE64Decoder;
import static toolupteepublic.MainTestChorme.isElementcssSelector;
import static toolupteepublic.MainTestChorme.readImageExcel;

/**
 *
 * @author me
 */
public class downloadanh extends javax.swing.JFrame {

    private final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36";
    /**
     *
     * Creates new form downloadanh
     */
    JFileChooser chooser;
    String choosertitle;
    String stringUrlSave;

    public downloadanh() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel123 = new javax.swing.JLabel();
        textURL = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        result = new javax.swing.JLabel();
        buttonChosefoder = new javax.swing.JButton();
        linkSaveFile = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        abcxyz = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        textURLForder = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel123.setText("Nhập tên profile");

        textURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textURLActionPerformed(evt);
            }
        });

        jButton1.setText("download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonChosefoder.setText("Chọn thư mục lưu");
        buttonChosefoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChosefoderActionPerformed(evt);
            }
        });

        linkSaveFile.setText("E:\\Poster\\Warcraft\\");
            linkSaveFile.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    linkSaveFileActionPerformed(evt);
                }
            });

            abcxyz.setColumns(20);
            abcxyz.setRows(5);
            jScrollPane1.setViewportView(abcxyz);

            jLabel1.setText("link forder");

            textURLForder.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    textURLForderActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(83, 83, 83)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(result))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(jButton1)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel123)
                                .addComponent(buttonChosefoder)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(textURLForder, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                .addComponent(textURL, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                .addComponent(linkSaveFile))
                            .addGap(36, 36, 36))))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(textURLForder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel123)
                        .addComponent(textURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonChosefoder, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(linkSaveFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addComponent(result)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)))
                    .addComponent(jButton1)
                    .addGap(39, 39, 39))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void textURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textURLActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {

//            System.out.println("bắt đầu captcha");
//            String access_key = "D139CE924B4E4FBF9DFC5D540D331D60";
//            ImageTyperzAPI i = new ImageTyperzAPI(access_key);
//            i.set_user_and_password("long.tn3101","Anhcanem1");
//            String balance = i.account_balance();
//            System.out.println(String.format("Balance: %s", balance));
//            HashMap<String, String> gp = new HashMap<String, String>();
//            gp.put("domain", "teepublic.com");
//            gp.put("challenge", "11e7d78d7ffdc449561cad393ff21733");
//            gp.put("gt", "f2ae6cadcf7886856696502e1d55e00c");
//            //gp.put("proxy", "126.45.34.53:123"); // or with auth 126.45.34.53:123:user:pass - optional
//            //gp.put("user_agent", "Your user agent"); // optional
//
//            String geetest_id = i.submit_geetest(gp);
//            while (i.in_progress(geetest_id)) Thread.sleep(10000);      // sleep for 10 seconds and retry
//
//                HashMap<String, String> gr = i.retrieve_geetest(geetest_id);     // get the response
//                System.out.println(String.format("Geetest response: %s - %s - %s", gr.get("challenge"),
//                gr.get("validate"), gr.get("seccode")));
            
            ProtectionDomain pd = MainTestChorme.class.getProtectionDomain();
            CodeSource cs = pd.getCodeSource();
            URL location = cs.getLocation();

            File directory4 = new File(location.getPath());
            String PathLocal = directory4.getParentFile().getPath();
            System.out.println(PathLocal);
            abcxyz.setText(PathLocal);
            // List<Account> listacc=readFromExcel("listing.xlsx");
            File directory1 = new File(PathLocal + "./listing.xlsx");
            List<Image> listacc = readImageExcel(directory1);

            // System.out.println(listacc.size());
            File currentDir = new File("");
            System.out.println(currentDir.getAbsolutePath());
            try {
                File myObj = new File(PathLocal + "./a/51A7ObLTGVL.png");
                if (myObj.createNewFile()) {
                    System.out.println("File created: " + myObj.getName());
                } else {
                    System.out.println("File already exists.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            File directory2 = new File(PathLocal + "./chromedriver.exe");
            String chromeDriverPath = directory2.getPath();
            System.setProperty("webdriver.chrome.driver", chromeDriverPath);

            /*
		 * ChromeDriverService chSvc = new ChromeDriverService.Builder()
		 * .usingDriverExecutable(new
		 * File("./chromedriver.exe")).usingAnyFreePort().build();
             */
            // theo debug
            /*
		 * ChromeOptions options = new ChromeOptions();
		 * 
		 * options.setExperimentalOption("debuggerAddress", "127.0.0.1:4444");
		 * options.addArguments("--start-maximized");
		 * options.addArguments("disable-infobars"); WebDriver driver = new
		 * ChromeDriver( options);
             */
            // end
            DesiredCapabilities capabilities = new DesiredCapabilities();
            String chromeProfilePath = textURLForder.getText();
            ChromeOptions chromeProfile = new ChromeOptions();

            chromeProfile.addArguments("start-maximized");
              chromeProfile.setExperimentalOption("excludeSwitches", new String[]{"enable-automation"}); 
            chromeProfile.addArguments("--user-data-dir=" + chromeProfilePath);
            // Here you specify the actual profile folder (Profile 2)
            chromeProfile.addArguments("--profile-directory=" + textURL.getText());
            capabilities.setCapability(ChromeOptions.CAPABILITY, chromeProfile);

            WebDriver driver = new ChromeDriver(capabilities);

            String scrip = "(function(jqueryUrl, callback) {\n"
                    + "    if (typeof jqueryUrl != 'string') {\n"
                    + "        jqueryUrl = \n"
                    + "            'https://code.jquery.com/jquery-3.2.1.min.js';\n"
                    + "    }\n"
                    + "    if (typeof jQuery == 'undefined') {\n"
                    + "        var script = document.createElement('script');\n"
                    + "        var head = document.getElementsByTagName('head')[0];\n"
                    + "        var done = false;\n"
                    + "        script.onload = script.onreadystatechange = (function() {\n"
                    + "            if (!done && (!this.readyState || this.readyState == 'loaded'\n"
                    + "                    || this.readyState == 'complete')) {\n"
                    + "                done = true;\n"
                    + "                script.onload = script.onreadystatechange = null;\n"
                    + "                head.removeChild(script);\n"
                    + "                callback();\n"
                    + "            }\n"
                    + "        });\n"
                    + "        script.src = jqueryUrl;\n"
                    + "        head.appendChild(script);\n"
                    + "    }\n"
                    + "    else {\n"
                    + "        callback();\n"
                    + "    }\n"
                    + "})(arguments[0], arguments[arguments.length - 1]);";

            // driver.get("https://www.facebook.com");
            driver.get("https://www.facebook.com/");
            Thread.sleep(randomInt(2, 3)*1000);
            driver.get("https://www.teepublic.com/");
             Thread.sleep(30000);
            /*Thread.sleep(30000);
		WebElement elem2 = driver.findElement(By.xpath("//input[@type='file']"));
		elem2.sendKeys("D:\\developdemo\\spy\\a\\51A7ObLTGVL.png");*/
//             Thread.sleep(randomInt(40, 50) * 1000);
//             driver.findElement(By.cssSelector("a.m-head__avatar-link")).sendKeys(Keys.ENTER);
//                Thread.sleep(randomInt(5, 7) * 1000);
            
            
            System.out.println("link up");
              driver.findElement(By.cssSelector("div.m-head__account nav.m-head__dropdown-links a:nth-child(1)")).sendKeys(Keys.ENTER);
            //driver.get("https://www.teepublic.com/design/quick_create");
              Thread.sleep(randomInt(10, 15) * 1000);
             if (isElementcssSelector("#ifdistilCaptchaForm", driver)) {
                    injectJQuery(driver, scrip);
                   System.out.println("End add jquery ");
                   JavascriptExecutor js = (JavascriptExecutor) driver;
                   checkCaptcha(driver, js, PathLocal);
              }
              //Thread.sleep(randomInt(10, 15) * 1000);

            for (Image image : listacc) {
                if (isElementcssSelector(".m-uploader-funnel.tp-file-single", driver)) {
                    driver.findElement(By.cssSelector(".m-uploader-funnel.tp-file-single")).click();
                }
                System.out.println("sau link up");
                WebDriverWait wait = new WebDriverWait(driver, randomInt(20, 30));
                wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("a.m-uploader__help-uploading")));
                //new WebDriverWait(driver, randomInt(20, 30)).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@type='file']")));
                WebElement elem = driver.findElement(By.xpath("//input[@type='file']"));
                elem.sendKeys(PathLocal + "./a/" + image.getImagename());
                System.out.println(image.getImagename());
                Thread.sleep(randomInt(20, 30) * 1000);
                System.out.println("xu ly tag");
                String[] words = image.getTag().toLowerCase().replace(" ", "").split(",");
                List<String> newtag = new ArrayList<>();
                for (int jkk = 0; jkk < words.length; jkk++) {
                    if (words[jkk] == null || words[jkk].trim().isEmpty()) {
                        continue;
                    }
                    if (newtag.contains(words[jkk].trim()) == false) {
                        newtag.add(words[jkk].trim());
                    }

                }
                wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div#secondary_tags input.ui-autocomplete-input")));
                WebElement element_enter = driver.findElement(By.cssSelector("div#secondary_tags input.ui-autocomplete-input"));
                int lengtag = 15;
                if (newtag.size() < 15) {
                    lengtag = newtag.size();
                }
                for (int k = 0; k < lengtag; k++) {
                    element_enter.sendKeys(newtag.get(k).trim());
                    Thread.sleep(500);
                    element_enter.sendKeys(Keys.ENTER);
                    Thread.sleep(randomInt(2, 4) * 1000);
                }
                Thread.sleep(randomInt(2, 4) * 1000);
                WebElement element_maintag = driver.findElement(By.cssSelector("input#design_primary_tag"));
                element_maintag.sendKeys(image.getMain());
                Thread.sleep(500);
                WebElement element_title = driver.findElement(By.cssSelector("input#design_design_title"));
                element_title.sendKeys(image.getMain());
                Thread.sleep(500);
                WebElement element_des = driver.findElement(By.cssSelector("textarea#design_design_description"));
                element_des.sendKeys(image.getMain());
                Thread.sleep(500);
                System.out.println("add jquery ");

                injectJQuery(driver, scrip);
                System.out.println("End add jquery ");
                JavascriptExecutor js = (JavascriptExecutor) driver;

                Thread.sleep(randomInt(3, 5) * 1000);
                wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div#primary_color_tshirt")));
                System.out.println("change mau");
                //js.executeScript("$('#primary_color_tshirt .dd-select').click();");
                 //System.out.println("change mau");
                 
                 //Thread.sleep(randomInt(3, 5) * 1000);
                Actions actions=new Actions(driver);
                WebElement mau=driver.findElement(By.cssSelector("div#primary_color_tshirt div.dd-select"));
                actions.moveToElement(mau).click().build().perform();
                 Thread.sleep(randomInt(1, 2) * 1000);
                 WebElement mau2=driver.findElement(By.cssSelector("div#primary_color_tshirt div.dd-click-off-close li:nth-child(4) a"));
                actions.moveToElement(mau2).click().build().perform();
                //js.executeScript("$('#primary_color_tshirt .dd-click-off-close li:nth-child(4) a').click();");
                 Thread.sleep(randomInt(3, 5) * 1000);
                 WebElement mau3=driver.findElement(By.cssSelector("div#primary_color_baseballtee div.dd-select"));
                actions.moveToElement(mau3).click().build().perform();
                //js.executeScript("$('#primary_color_baseballtee .dd-select').click();");
                System.out.println("change mau");
                 Thread.sleep(randomInt(1, 2) * 1000);
                  WebElement mau4=driver.findElement(By.cssSelector("div#primary_color_baseballtee div.dd-click-off-close li:nth-child(2) a"));
                actions.moveToElement(mau4).click().build().perform();
                //js.executeScript("$('#primary_color_baseballtee .dd-click-off-close li:nth-child(2) a').click();");
                Thread.sleep(500);
                  Thread.sleep(randomInt(1, 3) * 1000);
                System.out.println("resize ");
                
                  WebElement sizecase=driver.findElement(By.cssSelector("div.additional-canvases-container div.case img"));
                actions.moveToElement(sizecase).click().build().perform();
                 Thread.sleep(randomInt(1, 2) * 1000);
                //.additional-canvases-container .case img
                //js.executeScript("$('#design_mockup_config_case_attributes_image_size').val(80).trigger('change');");
                System.out.println("change size cass");
                 // start case
                 WebElement elem3333 = driver.findElement(By.cssSelector("input#design_mockup_config_case_attributes_image_size"));
                for (int i = 0; i < 61; i++) {
                    elem3333.sendKeys(Keys.LEFT);
                    
                    
                }
                 Thread.sleep(500);
                 WebElement cangiu=driver.findElement(By.cssSelector("div#product-editor div.case div.m-uploader-toolbar_tool-v-align"));
                actions.moveToElement(cangiu).click().build().perform();
                WebElement cancao=driver.findElement(By.cssSelector("div#product-editor div.case div.m-uploader-toolbar_tool-h-align"));
                actions.moveToElement(cancao).click().build().perform();
                
                
                
                //end case
                
                
                 Thread.sleep(randomInt(1, 2) * 1000);
                 
                 WebElement pillow=driver.findElement(By.cssSelector("div.additional-canvases-container div.pillow img"));
                actions.moveToElement(pillow).click().build().perform();
                 Thread.sleep(randomInt(1, 2) * 1000);
                 WebElement elem3344 = driver.findElement(By.cssSelector("input#design_mockup_config_pillow_attributes_image_size"));
                for (int i = 0; i < 61; i++) {
                    elem3344.sendKeys(Keys.LEFT);
                }
                 Thread.sleep(500);
                 WebElement cangiupillow=driver.findElement(By.cssSelector("div#product-editor div.pillow div.m-uploader-toolbar_tool-v-align"));
                actions.moveToElement(cangiupillow).click().build().perform();
                WebElement cancaopillow=driver.findElement(By.cssSelector("div#product-editor div.pillow div.m-uploader-toolbar_tool-h-align"));
                actions.moveToElement(cancaopillow).click().build().perform();
                Thread.sleep(500);
                
                
                
                
                //js.executeScript("$('#design_mockup_config_pillow_attributes_image_size').val(80).trigger('change');");
                System.out.println("change size pillow");
//                 Thread.sleep(randomInt(1, 2) * 1000);
//
//                System.out.println("cang giua ");
//                js.executeScript("$('.m-uploader-toolbar_tool-h-align').click();");
//                System.out.println("change mau");
//                 Thread.sleep(randomInt(1, 2) * 1000);
//                js.executeScript("$('.m-uploader-toolbar_tool-top-align').click();");
//                System.out.println("change mau");
//                 Thread.sleep(randomInt(1, 2) * 1000);
//                js.executeScript("$('.m-uploader-toolbar_tool-v-align').click();");

                Thread.sleep(randomInt(3, 5) * 1000);
               
                WebElement element_terms = driver.findElement(By.id("terms"));
                
                actions.moveToElement(element_terms);
                actions.click().build().perform();;
                //element_terms.click();
                
              
                Thread.sleep(500);
                 WebElement  butoon = driver.findElement(By.className("publish-and-promote-button"));
                  actions.moveToElement(butoon);
                actions.click().build().perform();;
                 //butoon.click();
                 //actions.click(butoon).build().perform();
                //js.executeScript("$('.publish-and-promote-button').click();");
//            driver.findElement(By.cssSelector("button.publish-and-promote-button")).click();
                //driver.findElement(By.cssSelector("div#primary_color_tshirt ul.dd-click-off-close li:nth-child(4) a")).click();
                 Thread.sleep(randomInt(5, 10) * 1000);
                 if (isElementcssSelector("#ifdistilCaptchaForm", driver)) {
                    injectJQuery(driver, scrip);
                   System.out.println("End add jquery ");
                   JavascriptExecutor js2 = (JavascriptExecutor) driver;
                   checkCaptcha(driver, js2, PathLocal);
              }


                /*Thread.sleep(30000);
		WebElement elem2 = driver.findElement(By.xpath("//input[@type='file']"));
		elem2.sendKeys("D:\\developdemo\\spy\\a\\51A7ObLTGVL.png");*/
                //Thread.sleep(randomInt(5, 10) * 1000);

                System.out.println("link up");
                driver.get("https://www.teepublic.com/design/quick_create");
                
                 Thread.sleep(randomInt(10, 15) * 1000);
                 if (isElementcssSelector("#ifdistilCaptchaForm", driver)) {
                    injectJQuery(driver, scrip);
                   System.out.println("End add jquery ");
                   JavascriptExecutor js2 = (JavascriptExecutor) driver;
                   checkCaptcha(driver, js2, PathLocal);
                }

            }
            driver.close();
            driver.quit();
            // Logout
        } catch (Exception ex) {
            // abcxyz.setText(ex.getMessage());
            ex.printStackTrace();
            
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    public static void injectJQuery(WebDriver driver, String jQueryStr)
            throws IOException {

        driver.manage().timeouts().setScriptTimeout(10, TimeUnit.SECONDS);
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeAsyncScript(jQueryStr);
    }

    public static void checkCaptcha(WebDriver driver,JavascriptExecutor js,String PathLocal) throws InterruptedException, IOException{
         WebDriverWait wait = new WebDriverWait(driver, 15);
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.geetest_radar_tip")));
      
        js.executeScript("$('.geetest_radar_tip').click();");
        
       new WebDriverWait(driver, 15).until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.geetest_canvas_img canvas:nth-child(1)")));
         Thread.sleep(2000);
        
        
        
        WebElement elem = driver.findElement(By.cssSelector("div.geetest_canvas_img canvas:nth-child(1)"));

        String base64string = (String) js.executeScript("return arguments[0].toDataURL('image/png').replace(/^data:image\\/png;base64,/, '');", elem);
        String[] base64Array = base64string.split(",");

        String base64 = base64Array[base64Array.length - 1];

        System.out.println("a");
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] data = decoder.decodeBuffer(base64);

        ByteArrayInputStream memstream = new ByteArrayInputStream(data);
        BufferedImage saveImage = ImageIO.read(memstream);

        ImageIO.write(saveImage, "png", new File("captcha.png"));

        elem = driver.findElement(By.cssSelector("div.geetest_canvas_img canvas:nth-child(2)"));

        base64string = (String) js.executeScript("return arguments[0].toDataURL('image/png').replace(/^data:image\\/png;base64,/, '');", elem);
        base64Array = base64string.split(",");

        base64 = base64Array[base64Array.length - 1];

        System.out.println("a");

        data = decoder.decodeBuffer(base64);

        memstream = new ByteArrayInputStream(data);
        saveImage = ImageIO.read(memstream);

        ImageIO.write(saveImage, "png", new File("puzzle.png"));

        //elem = driver.findElement(By.cssSelector("div..geetest_canvas_img .geetest_canvas_fullbg"));

        base64string = (String) js.executeScript("return ($('.geetest_canvas_img .geetest_canvas_fullbg')[0]).toDataURL('image/png').replace(/^data:image\\/png;base64,/, '');");
        base64Array = base64string.split(",");

        base64 = base64Array[base64Array.length - 1];

        System.out.println("a");

        data = decoder.decodeBuffer(base64);

        memstream = new ByteArrayInputStream(data);
        saveImage = ImageIO.read(memstream);

        ImageIO.write(saveImage, "png", new File("original.png"));
        
        
//           js.executeScript("$('body,html').animate({scrollTop: $('.geetest_slider_button').offset().top}, 800);");
//          System.out.println("a");
//           Thread.sleep(2000);
//          System.out.println("a");
         WebElement botton = driver.findElement(By.cssSelector("div.geetest_slider_button"));
        
     
        
//         int x = ((botton.getSize().getHeight()/2) - botton.getSize().getHeight());
//        int y =  (botton.getSize().getWidth()/2) - botton.getSize().getWidth();
//        Locatable elementLocation = (Locatable) botton;
        
//    Point ab =   elementLocation.getCoordinates().inViewPort();
//        System.out.println(x);
//        System.out.println(y);
//        System.out.println("x new"+ab.getX() +" y new" + ab.getY());
//        int yz=ab.getY();
        
       
        System.out.println("trc node");
        ProcessBuilder builder = new ProcessBuilder(
            "cmd.exe", "/c", "cd "+PathLocal+" && node index.js");
        builder.redirectErrorStream(true);
        Process p = builder.start();
        BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        StringBuffer a=new StringBuffer();
        while (true) {
            line = r.readLine();
            if (line == null) { break; }
            a.append(line);
            
        }
        System.out.println(a.toString());
        String[] catchapx=a.toString().split(",");
        int cx=Integer.parseInt(catchapx[0]);
        
        int cxPuzzle=Integer.parseInt(catchapx[1]);
        String move=String.valueOf(cx-cxPuzzle) +"px";
//         js.executeScript("$('.geetest_slider_button').css({'transform' : 'translate("+move+", 0px)'});");
//            Thread.sleep(2000);
        Actions action=new Actions(driver);
        action.moveToElement(botton);
        //action.clickAndHold();
        //action.moveByOffset(cx-cxPuzzle, 0);
        action.clickAndHold();
        action.moveByOffset(cx-cxPuzzle-10, 0);
        action.pause(Duration.ofSeconds(2l));
        //action.moveByOffset( 0, 0).pause(cx);
        action.moveByOffset(5, 0);
        action.pause(Duration.ofSeconds(2l));
        action.dragAndDropBy(botton,5, 0);
        //action.dragAndDropBy(botton, cx-cxPuzzle, 0).pause(3000);
        action.build().perform();
         System.out.println("done captcha");
        Thread.sleep(randomInt(6, 8) * 1000);
       
    }
      public static int randomInt(int min,int max)
     {
         ThreadLocalRandom random = ThreadLocalRandom.current();
         int rand = random.nextInt(min, max);
         return rand;
     }
    protected static boolean isElementcssSelector(String tagcss, WebDriver driver) {
        try {
            driver.findElement(By.cssSelector(tagcss));
            return true;
        } catch (Exception e) {
            return false;
        }
    }
//	public static List<Account> readFromExcel(String file) throws IOException {
//		List<Account> reList = new ArrayList<>();
//		XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(file));
//		XSSFSheet myExcelSheet = myExcelBook.getSheet("data");
//		for (int i = 1; i < myExcelSheet.getPhysicalNumberOfRows(); i++) {
//			{
//				Account account = new Account();
//				if (myExcelSheet.getRow(i).getCell(1) != null
//						&& myExcelSheet.getRow(i).getCell(1).getCellType() == HSSFCell.CELL_TYPE_STRING) {
//					String name = myExcelSheet.getRow(i).getCell(1).getStringCellValue();
//					System.out.println("name : " + name);
//					account.setUserName(name);
//				} else {
//					break;
//					// account.setUserName("");
//
//				}
//
//				if (myExcelSheet.getRow(i).getCell(2) != null
//						&& myExcelSheet.getRow(i).getCell(2).getCellType() == HSSFCell.CELL_TYPE_STRING) {
//					String pass = myExcelSheet.getRow(i).getCell(2).getStringCellValue();
//					System.out.println("pass :" + pass);
//					account.setPassword(pass);
//				} else {
//					account.setPassword("");
//				}
//
//				reList.add(account);
//			}
//		}
//
//		myExcelBook.close();
//		return reList;
//
//	}

     private static String getUrlContents(String theUrl)
  {
    StringBuilder content = new StringBuilder();

    // many of these calls can throw exceptions, so i've just
    // wrapped them all in one try/catch statement.
    try
    {
      // create a url object
      URL url = new URL(theUrl);

      // create a urlconnection object
      URLConnection urlConnection = url.openConnection();

      // wrap the urlconnection in a bufferedreader
      BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));

      String line;

      // read from the urlconnection via the bufferedreader
      while ((line = bufferedReader.readLine()) != null)
      {
        content.append(line + "\n");
      }
      bufferedReader.close();
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
    return content.toString().replace("OK|", "");
  }
    public static List<Image> readImageExcel(File file) throws IOException, InvalidFormatException {
        List<Image> reList = new ArrayList<>();
        XSSFWorkbook myExcelBook = new XSSFWorkbook(file);
        XSSFSheet myExcelSheet = myExcelBook.getSheet("ketqua");
        for (int i = 1; i < myExcelSheet.getPhysicalNumberOfRows(); i++) {
            {
                Image image = new Image();
                if (myExcelSheet.getRow(i).getCell(0) != null
                        && myExcelSheet.getRow(i).getCell(0).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Foldername = myExcelSheet.getRow(i).getCell(0).getStringCellValue();
                    // System.out.println("name : " + Foldername);
                    image.setFoldername(Foldername);
                } else {
                    break;
                    // image.setFoldername("");
                }

                if (myExcelSheet.getRow(i).getCell(1) != null
                        && myExcelSheet.getRow(i).getCell(1).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Imagename = myExcelSheet.getRow(i).getCell(1).getStringCellValue();
                    // System.out.println("Imagename :" + Imagename);
                    image.setImagename(Imagename);
                } else {
                    image.setImagename("");
                }

                if (myExcelSheet.getRow(i).getCell(2) != null
                        && myExcelSheet.getRow(i).getCell(2).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Title = myExcelSheet.getRow(i).getCell(2).getStringCellValue();
                    // System.out.println("Title :" + Title);
                    image.setTitle(Title);
                } else {
                    image.setTitle("");
                }

                if (myExcelSheet.getRow(i).getCell(3) != null
                        && myExcelSheet.getRow(i).getCell(3).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Des = myExcelSheet.getRow(i).getCell(3).getStringCellValue();
                    // System.out.println("Des :" + Des);
                    image.setDes(Des);
                } else {
                    image.setDes("");
                }

                if (myExcelSheet.getRow(i).getCell(4) != null
                        && myExcelSheet.getRow(i).getCell(4).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Tag = myExcelSheet.getRow(i).getCell(4).getStringCellValue();
                    // System.out.println("Tag :" + Tag);
                    image.setTag(Tag);
                } else {
                    image.setTag("");
                }
                if (myExcelSheet.getRow(i).getCell(5) != null
                        && myExcelSheet.getRow(i).getCell(5).getCellType() == HSSFCell.CELL_TYPE_STRING) {
                    String Main = myExcelSheet.getRow(i).getCell(5).getStringCellValue();
                    // System.out.println("Main :" + Main);
                    image.setMain(Main);
                } else {
                    image.setMain("");
                }

                reList.add(image);
            }
        }

        myExcelBook.close();
        return reList;

    }

    private void buttonChosefoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChosefoderActionPerformed
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            stringUrlSave = chooser.getSelectedFile().toString();
            linkSaveFile.setText(stringUrlSave + "\\");

        } else {
            System.out.println("No Selection ");
        }

    }//GEN-LAST:event_buttonChosefoderActionPerformed

    private void linkSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkSaveFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkSaveFileActionPerformed

    private void textURLForderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textURLForderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textURLForderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

//        try {
//            /* Set the Nimbus look and feel */
//            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//            */
//            try {
//                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                    if ("Nimbus".equals(info.getName())) {
//                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                        break;
//                    }
//                }
//            } catch (ClassNotFoundException ex) {
//                java.util.logging.Logger.getLogger(downloadanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//            } catch (InstantiationException ex) {
//                java.util.logging.Logger.getLogger(downloadanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//            } catch (IllegalAccessException ex) {
//                java.util.logging.Logger.getLogger(downloadanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//                java.util.logging.Logger.getLogger(downloadanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//            }
//            //</editor-fold>
//            //</editor-fold>
//             Document page;
//      String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36";
//      
//       page = Jsoup.connect("https://besthqwallpapers.com/search/Warcraft").userAgent(USER_AGENT).get();
//            System.out.println(page.title());
//           Elements links = page.select(".wallpaper-thumb img");
//            Elements links2 = page.select(".boxgrid a");
//             for (Element link : links) {
//                 //Element element =link.ch
//               
//                 
//            //System.out.println("\nlink : " + link.attr("src").replace("thumb-", "") +" == alt :"+link.attr("alt"));
//            
//                 System.out.println(cutLink(link.attr("src")));
//            
//            
//            
//        }
//              } catch (IOException ex) {
//            Logger.getLogger(downloadanh.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                downloadanh abc = new downloadanh();
                abc.setVisible(true);
            }
        });

        //</editor-fold>
        //</editor-fold>
    }

    public static String cutLink(String url) {
        String urlresturn = "";
        try {

            String a = url;
            int dem = 0;
            for (int index = a.indexOf("/");
                    index >= 0;
                    index = a.indexOf("/", index + 1)) {
                dem++;
                if (dem == 3) {

                    urlresturn = "https://besthqwallpapers.com/img/original" + a.substring(index);

                    break;
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(downloadanh.class.getName()).log(Level.SEVERE, null, ex);
        }
        return urlresturn;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea abcxyz;
    private javax.swing.JButton buttonChosefoder;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField linkSaveFile;
    private javax.swing.JLabel result;
    private javax.swing.JTextField textURL;
    private javax.swing.JTextField textURLForder;
    // End of variables declaration//GEN-END:variables
}
